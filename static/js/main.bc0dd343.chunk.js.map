{"version":3,"sources":["components/Card.js","components/CardList.js","components/SearchBox.js","components/Scroll.js","components/ErrorBoundary.js","containers/App.js","serviceWorker.js","index.js"],"names":["Card","_ref","name","email","id","react_default","a","createElement","className","alt","src","concat","CardList","robots","map","user","i","components_Card","key","SearchBox","searchChange","type","placeholder","onChange","Scroll","props","style","overflowY","border","height","children","ErrorBoundary","_this","Object","classCallCheck","this","possibleConstructorReturn","getPrototypeOf","call","state","hasError","error","info","setState","Component","App","onSearchChange","event","searchfield","target","value","_this2","fetch","then","response","json","users","_this$state","filteredRobots","filter","robot","toLowerCase","includes","length","components_SearchBox","components_Scroll","components_ErrorBoundary","components_CardList","isLocalhost","Boolean","window","location","hostname","match","registerValidSW","swUrl","config","navigator","serviceWorker","register","registration","onupdatefound","installingWorker","installing","onstatechange","controller","console","log","onUpdate","onSuccess","catch","ReactDOM","render","src_containers_App","document","getElementById","URL","process","href","origin","addEventListener","headers","Service-Worker","contentType","get","status","indexOf","ready","unregister","reload","checkValidServiceWorker"],"mappings":"yNAeeA,EAbF,SAAAC,GAAuB,IAArBC,EAAqBD,EAArBC,KAAMC,EAAeF,EAAfE,MAAOC,EAAQH,EAARG,GAC3B,OACCC,EAAAC,EAAAC,cAAA,OAAKC,UAAW,uDACfH,EAAAC,EAAAC,cAAA,OAAKE,IAAK,SAASC,IAAG,wBAAAC,OAA0BP,EAA1B,eACvBC,EAAAC,EAAAC,cAAA,WACCF,EAAAC,EAAAC,cAAA,UAAKL,GACLG,EAAAC,EAAAC,cAAA,SAAIJ,MCaQS,EAlBE,SAAAX,GAAa,IAAXY,EAAWZ,EAAXY,OAElB,OAECR,EAAAC,EAAAC,cAAA,WACIM,EAAOC,IAAI,SAACC,EAAMC,GACrB,OAASX,EAAAC,EAAAC,cAACU,EAAD,CAAMC,IAAKF,EACnBZ,GAAIS,EAAOG,GAAGZ,GACdF,KAAMW,EAAOG,GAAGd,KAChBC,MAAOU,EAAOG,GAAGb,YCINgB,EAbG,SAAAlB,GAAmB,IAAjBmB,EAAiBnB,EAAjBmB,aAEnB,OACCf,EAAAC,EAAAC,cAAA,OAAKC,UAAY,OACjBH,EAAAC,EAAAC,cAAA,SACAC,UAAY,mCACXa,KAAM,SACNC,YAAc,gBACdC,SAAUH,MCDEI,EARA,SAACC,GACf,OACCpB,EAAAC,EAAAC,cAAA,OAAKmB,MAAO,CAACC,UAAU,SAAUC,OAAO,kBAAmBC,OAAO,UAChEJ,EAAMK,WCsBKC,cAvBd,SAAAA,EAAYN,GAAM,IAAAO,EAAA,OAAAC,OAAAC,EAAA,EAAAD,CAAAE,KAAAJ,IACjBC,EAAAC,OAAAG,EAAA,EAAAH,CAAAE,KAAAF,OAAAI,EAAA,EAAAJ,CAAAF,GAAAO,KAAAH,KAAMV,KACDc,MAAO,CACXC,UAAS,GAHOR,iFAQCS,EAAOC,GACxBP,KAAKQ,SAAS,CAACH,UAAU,qCAK3B,OAAGL,KAAKI,MAAMC,SACNnC,EAAAC,EAAAC,cAAA,wCAGD4B,KAAKV,MAAMK,gBAnBSc,aCgDbC,qBA3Cd,SAAAA,IAAa,IAAAb,EAAA,OAAAC,OAAAC,EAAA,EAAAD,CAAAE,KAAAU,IACZb,EAAAC,OAAAG,EAAA,EAAAH,CAAAE,KAAAF,OAAAI,EAAA,EAAAJ,CAAAY,GAAAP,KAAAH,QAcFW,eAAiB,SAACC,GACjBf,EAAKW,SAAS,CAACK,YAAYD,EAAME,OAAOC,SAdvClB,EAAKO,MAAQ,CACZ1B,OAAQ,GACRmC,YAAa,IAJFhB,mFAQM,IAAAmB,EAAAhB,KAClBiB,MAAM,8CACLC,KAAK,SAAAC,GAAQ,OAAIA,EAASC,SAC1BF,KAAK,SAAAG,GAAK,OAAIL,EAAKR,SAAS,CAAC9B,OAAO2C,uCAQ9B,IAAAC,EACqBtB,KAAKI,MAA3B1B,EADC4C,EACD5C,OAAQmC,EADPS,EACOT,YACRU,EAAiB7C,EAAO8C,OAAO,SAAAC,GACrC,OAAOA,EAAM1D,KAAK2D,cAAcC,SAASd,EAAYa,iBAEpD,OAAQhD,EAAOkD,OAGf1D,EAAAC,EAAAC,cAAA,OAAKC,UAAY,MACjBH,EAAAC,EAAAC,cAAA,MAAIC,UAAY,MAAhB,uBACAH,EAAAC,EAAAC,cAACyD,EAAD,CAAW5C,aAAgBe,KAAKW,iBAChCzC,EAAAC,EAAAC,cAAC0D,EAAD,KACA5D,EAAAC,EAAAC,cAAC2D,EAAD,KACA7D,EAAAC,EAAAC,cAAC4D,EAAD,CAAUtD,OAAU6C,OAPpBrD,EAAAC,EAAAC,cAAA,4BA1BeqC,cCKZwB,EAAcC,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DAsCN,SAASC,EAAgBC,EAAOC,GAC9BC,UAAUC,cACPC,SAASJ,GACTtB,KAAK,SAAA2B,GACJA,EAAaC,cAAgB,WAC3B,IAAMC,EAAmBF,EAAaG,WACd,MAApBD,IAGJA,EAAiBE,cAAgB,WACA,cAA3BF,EAAiB3C,QACfsC,UAAUC,cAAcO,YAI1BC,QAAQC,IACN,iHAKEX,GAAUA,EAAOY,UACnBZ,EAAOY,SAASR,KAMlBM,QAAQC,IAAI,sCAGRX,GAAUA,EAAOa,WACnBb,EAAOa,UAAUT,UAO5BU,MAAM,SAAAjD,GACL6C,QAAQ7C,MAAM,4CAA6CA,WCxFjEkD,IAASC,OACRvF,EAAAC,EAAAC,cAACsF,EAAD,MACCC,SAASC,eAAe,SDYnB,SAAkBnB,GACvB,GAA6C,kBAAmBC,UAAW,CAGzE,GADkB,IAAImB,IAAIC,YAAwB3B,OAAOC,SAAS2B,MACpDC,SAAW7B,OAAOC,SAAS4B,OAIvC,OAGF7B,OAAO8B,iBAAiB,OAAQ,WAC9B,IAAMzB,EAAK,GAAAhE,OAAMsF,YAAN,sBAEP7B,GAgEV,SAAiCO,EAAOC,GAEtCxB,MAAMuB,EAAO,CACX0B,QAAS,CAAEC,iBAAkB,YAE5BjD,KAAK,SAAAC,GAEJ,IAAMiD,EAAcjD,EAAS+C,QAAQG,IAAI,gBAEnB,MAApBlD,EAASmD,QACO,MAAfF,IAA8D,IAAvCA,EAAYG,QAAQ,cAG5C7B,UAAUC,cAAc6B,MAAMtD,KAAK,SAAA2B,GACjCA,EAAa4B,aAAavD,KAAK,WAC7BiB,OAAOC,SAASsC,aAKpBnC,EAAgBC,EAAOC,KAG1Bc,MAAM,WACLJ,QAAQC,IACN,mEAvFAuB,CAAwBnC,EAAOC,GAI/BC,UAAUC,cAAc6B,MAAMtD,KAAK,WACjCiC,QAAQC,IACN,gHAMJb,EAAgBC,EAAOC,MCrC/BE","file":"static/js/main.bc0dd343.chunk.js","sourcesContent":["import React from 'react';\r\n\r\nconst Card = ({name, email, id}) => {\r\n\treturn (\r\n\t\t<div className= 'tc bg-light-green dib br3 pa3 ma2 grow bw2 shadow-5'>\r\n\t\t\t<img alt ='robots' src={`https://robohash.org/${id}?150x150'`}/>\r\n\t\t<div>\r\n\t\t\t<h2>{name}</h2>\r\n\t\t\t<p>{email}</p>\r\n\t\t</div>\r\n\t\t</div>\r\n\r\n\t\t)\r\n}\r\n\r\nexport default Card;","import React from 'react';\r\nimport Card from './Card';\r\n\r\nconst CardList = ({robots}) =>{\r\n\r\n\treturn(\r\n\r\n\t\t<div>\r\n\t\t   {robots.map((user, i) =>{\r\n\t\t\treturn  (<Card key={i}\r\n\t\t\t id={robots[i].id} \r\n\t\t\t name={robots[i].name} \r\n\t\t\t email={robots[i].email}/>\t\t \r\n\t\t\t );\r\n\t\t})\r\n}\r\n\t\t</div>\r\n\r\n\t\t);\r\n}\r\n\r\nexport default CardList;","import React from 'react'\r\n\r\n\r\nconst SearchBox = ({searchChange}) =>{\r\n\r\n\treturn(\r\n\t\t<div className = 'pa2'>\r\n\t\t<input\r\n\t\tclassName = 'pa3 ba b--green bg-lightest-blue'\r\n\t\t type ='search' \r\n\t\t placeholder = 'search robots'\r\n\t\t onChange={searchChange} />\r\n\t\t</div>\r\n\t\t);\r\n}\r\n\r\nexport default SearchBox;","import React from 'react';\r\n\r\nconst Scroll = (props) =>{\r\n\treturn (\r\n\t\t<div style={{overflowY:'scroll', border:'5px solid black', height:'800px'}}>\r\n\t\t\t{props.children}\r\n\t\t</div>\r\n\t\t)\r\n};\r\n\r\nexport default Scroll;","import React, { Component } from 'react'\r\n\r\n\r\nclass ErrorBoundary extends Component {\r\n\tconstructor(props){\r\n\t\tsuper(props);\r\n\t\tthis.state ={\r\n\t\t\thasError:false\r\n\t\t}\r\n\t}\r\n\r\n\r\n  componentDidCatch(error, info){\r\n  \tthis.setState({hasError: true})\r\n  }\r\n\r\n\r\nrender(){\r\n\tif(this.state.hasError){\r\n\t\treturn <h1> Oooops. That is not good </h1>\r\n\t}\r\n\r\n\treturn this.props.children\r\n}\r\n\r\n}\r\n\r\nexport default ErrorBoundary","import React, {Component} from 'react'\r\nimport CardList from '../components/CardList'\r\nimport SearchBox from '../components/SearchBox'\r\nimport Scroll from '../components/Scroll'\r\nimport ErrorBoundary from '../components/ErrorBoundary'\r\nimport'./App.css';\r\n\r\nclass App extends Component {\r\n\tconstructor(){\r\n\t\tsuper()\r\n\t\tthis.state = {\r\n\t\t\trobots: [],\r\n\t\t\tsearchfield: ''\r\n\t\t}\r\n\t}\r\n\r\n\tcomponentDidMount(){\r\n\t\tfetch('https://jsonplaceholder.typicode.com/users')\r\n\t\t.then(response => response.json())\r\n\t\t.then(users => this.setState({robots:users}));\r\n\r\n\t\t}\r\n\r\nonSearchChange = (event) =>{\r\n\tthis.setState({searchfield:event.target.value})\t\r\n}\r\n\r\n\trender(){\r\n\t\tconst{robots, searchfield} =this.state;\r\n\t\tconst filteredRobots = robots.filter(robot =>{\r\n\t\treturn robot.name.toLowerCase().includes(searchfield.toLowerCase());\r\n\t})\r\n\t\t\treturn !robots.length?\r\n\t\t\t<h1>Loading</h1> : \r\n\t\t\t(\r\n\t\t\t<div className = 'tc'>\r\n\t\t\t<h1 className = 'f1'>David's Robofriends</h1>\r\n\t\t\t<SearchBox searchChange = {this.onSearchChange}/>\r\n\t\t\t<Scroll>\r\n\t\t\t<ErrorBoundary>\r\n\t\t\t<CardList robots = {filteredRobots}/>\r\n\t\t\t</ErrorBoundary>\r\n\t\t\t</Scroll>\r\n\r\n\t\t\t</div>\r\n\t\t\t);\r\n\r\n\t}\r\n\t\r\n}\r\n\r\nexport default App;","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './containers/App'\nimport * as serviceWorker from './serviceWorker';\nimport \"tachyons\";\n\n\nReactDOM.render(\n\t<App />\n, document.getElementById('root')\n);\n\nserviceWorker.register();\n\n\n\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\n\n"],"sourceRoot":""}